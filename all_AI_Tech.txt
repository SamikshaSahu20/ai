===================WATER JUG BFS================

from collections import deque

class State:
    def __init__(self, jug1, jug2, path):
        self.jug1 = jug1
        self.jug2 = jug2
        self.path = path

def is_goal(state, target):
    return state.jug1 == target or state.jug2 == target

def get_next_states(state, cap1, cap2):
    next_states = []

    moves = [
        (cap1, state.jug2),  # Fill jug1
        (state.jug1, cap2),  # Fill jug2
        (0, state.jug2),     # Empty jug1
        (state.jug1, 0),     # Empty jug2
        (state.jug1 - min(state.jug1, cap2 - state.jug2), state.jug2 + min(state.jug1, cap2 - state.jug2)),  # Pour jug1 to jug2
        (state.jug1 + min(state.jug2, cap1 - state.jug1), state.jug2 - min(state.jug2, cap1 - state.jug1))   # Pour jug2 to jug1
    ]

    for move in moves:
        if move != (state.jug1, state.jug2):
            new_path = state.path + [f"({move[0]}, {move[1]})"]
            next_states.append(State(move[0], move[1], new_path))

    return next_states

def solve_bfs(cap1, cap2, target):
    queue = deque()
    visited = set()
    all_states_traversed = []

    start = State(0, 0, ["(0, 0)"])
    queue.append(start)
    visited.add((0, 0))
    all_states_traversed.append("(0, 0)")

    while queue:
        state = queue.popleft()

        if is_goal(state, target):
            print("All states traversed during BFS:")
            print(" -> ".join(all_states_traversed))
            print("\nSolution path:")
            print(" -> ".join(state.path) + " -> Goal reached!")
            return

        for next_state in get_next_states(state, cap1, cap2):
            key = (next_state.jug1, next_state.jug2)
            if key not in visited:
                queue.append(next_state)
                visited.add(key)
                all_states_traversed.append(f"({key[0]}, {key[1]})")

    print("All states traversed during BFS:")
    print(" -> ".join(all_states_traversed))
    print("No solution found using BFS.")

if __name__ == "__main__":
    cap1 = int(input("Enter capacity of jug1: "))
    cap2 = int(input("Enter capacity of jug2: "))
    target = int(input("Enter target amount: "))
    solve_bfs(cap1, cap2, target)

-----------------------------------------------------------------------------------------------------------------------------------------------------
===================WATER JUG DFS================
class State:
    def __init__(self, jug1, jug2, path):
        self.jug1 = jug1
        self.jug2 = jug2
        self.path = path

def is_goal(state, target):
    return state.jug1 == target or state.jug2 == target

def get_next_states(state, cap1, cap2):
    next_states = []

    moves = [
        (cap1, state.jug2),  # Fill jug1
        (state.jug1, cap2),  # Fill jug2
        (0, state.jug2),     # Empty jug1
        (state.jug1, 0),     # Empty jug2
        (state.jug1 - min(state.jug1, cap2 - state.jug2), state.jug2 + min(state.jug1, cap2 - state.jug2)),  # Pour jug1 to jug2
        (state.jug1 + min(state.jug2, cap1 - state.jug1), state.jug2 - min(state.jug2, cap1 - state.jug1))   # Pour jug2 to jug1
    ]

    for move in moves:
        if move != (state.jug1, state.jug2):
            new_path = state.path + [f"({move[0]}, {move[1]})"]
            next_states.append(State(move[0], move[1], new_path))

    return next_states

def solve_dfs(cap1, cap2, target):
    stack = []
    visited = set()
    all_states_traversed = []

    start = State(0, 0, ["(0, 0)"])
    stack.append(start)
    visited.add((0, 0))
    all_states_traversed.append("(0, 0)")

    while stack:
        state = stack.pop()

        if is_goal(state, target):
            print("All states traversed during DFS:")
            print(" -> ".join(all_states_traversed))
            print("\nSolution path:")
            print(" -> ".join(state.path) + " -> Goal reached!")
            return

        for next_state in get_next_states(state, cap1, cap2):
            key = (next_state.jug1, next_state.jug2)
            if key not in visited:
                stack.append(next_state)
                visited.add(key)
                all_states_traversed.append(f"({key[0]}, {key[1]})")

    print("All states traversed during DFS:")
    print(" -> ".join(all_states_traversed))
    print("No solution found using DFS.")

if __name__ == "__main__":
    cap1 = int(input("Enter capacity of jug1: "))
    cap2 = int(input("Enter capacity of jug2: "))
    target = int(input("Enter target amount: "))
    solve_dfs(cap1, cap2, target)

-----------------------------------------------------------------------------------------------------------------------------------------------------
===================HILL CLIMBING FOR 8 PUZZLE================
import random
from copy import deepcopy

goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

def get_blank_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def get_possible_moves(blank_pos):
    i, j = blank_pos
    moves = []
    if i > 0: moves.append((-1, 0))
    if i < 2: moves.append((1, 0))
    if j > 0: moves.append((0, -1))
    if j < 2: moves.append((0, 1))
    return moves

def move_tile(state, blank_pos, move):
    new_state = deepcopy(state)
    i, j = blank_pos
    di, dj = move
    new_state[i][j], new_state[i + di][j + dj] = new_state[i + di][j + dj], new_state[i][j]
    return new_state

def misplaced_tiles(state):
    return sum(1 for i in range(3) for j in range(3) if state[i][j] != goal_state[i][j] and state[i][j] != 0)

def hill_climbing(initial_state):
    current_state = initial_state
    step = 0
    while True:
        print(f"Step {step}:")
        print_state(current_state)
        step += 1
        
        blank_pos = get_blank_position(current_state)
        possible_moves = get_possible_moves(blank_pos)
        
        next_states = [move_tile(current_state, blank_pos, move) for move in possible_moves]
        next_states.sort(key=misplaced_tiles)
        
        best_next_state = next_states[0]
        
        if misplaced_tiles(best_next_state) >= misplaced_tiles(current_state):
            return current_state
        
        current_state = best_next_state

def print_state(state):
    for row in state:
        print(row)
    print()

if __name__ == "__main__":
    initial_state = [[1, 2, 3], [4, 6, 0], [7, 5, 8]]  
    print("Initial State:")
    print_state(initial_state)
    
    solution = hill_climbing(initial_state)
    print("Solution State:")
    print_state(solution)
-----------------------------------------------------------------------------------------------------------------------------------------------------
===================BFS 8 PUZZLE================
from collections import deque

goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

def get_blank_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def get_possible_moves(blank_pos):
    i, j = blank_pos
    moves = []
    if i > 0: moves.append((-1, 0))
    if i < 2: moves.append((1, 0))
    if j > 0: moves.append((0, -1))
    if j < 2: moves.append((0, 1))
    return moves

def move_tile(state, blank_pos, move):
    new_state = [row[:] for row in state]
    i, j = blank_pos
    di, dj = move
    new_state[i][j], new_state[i + di][j + dj] = new_state[i + di][j + dj], new_state[i][j]
    return new_state

def is_solvable(state):
    flat_list = [num for row in state for num in row if num != 0]
    inversions = sum(1 for i in range(len(flat_list)) for j in range(i + 1, len(flat_list)) if flat_list[i] > flat_list[j])
    return inversions % 2 == 0

def bfs_solve(initial_state):
    if not is_solvable(initial_state):
        return None
    
    queue = deque([(initial_state, [])])
    visited = set()
    
    while queue:
        current_state, path = queue.popleft()
        
        if current_state == goal_state:
            return path + [current_state]
        
        visited.add(tuple(map(tuple, current_state)))
        blank_pos = get_blank_position(current_state)
        
        for move in get_possible_moves(blank_pos):
            next_state = move_tile(current_state, blank_pos, move)
            if tuple(map(tuple, next_state)) not in visited:
                queue.append((next_state, path + [current_state]))
    
    return None

def print_state(state):
    for row in state:
        print(row)
    print()

def print_solution(solution):
    if solution is None:
        print("No solution found! The given state is unsolvable.")
    else:
        print("Solution Path:")
        for step, state in enumerate(solution):
            print(f"Step {step}:")
            print_state(state)

if __name__ == "__main__":
    print("Enter the initial state row-wise (use space to separate numbers, 0 for blank tile):")
    initial_state = [list(map(int, input().split())) for _ in range(3)]
    
    print("Initial State:")
    print_state(initial_state)
    
    solution = bfs_solve(initial_state)
    print_solution(solution)

# 2 8 3
# 4 5 7
# 0 1 6
-----------------------------------------------------------------------------------------------------------------------------------------------------
===================BFS CITY DIST================
from queue import PriorityQueue

def best_first_search(graph, start, goal, heuristic):
    visited = set()
    pq = PriorityQueue()
    pq.put((heuristic[start], start, [start]))  # (heuristic value, city, path)
    
    while not pq.empty():
        _, current, path = pq.get()
        
        if current == goal:
            return path
        
        visited.add(current)
        
        for neighbor, cost in graph[current]:
            if neighbor not in visited:
                pq.put((heuristic[neighbor], neighbor, path + [neighbor]))
    
    return None  # No path found

# Taking input for graph
graph = {}
n = int(input("Enter the number of cities: "))
print("Enter the city connections in format: City1 City2 Distance")
for _ in range(n):
    city1, city2, dist = input().split()
    dist = int(dist)
    
    if city1 not in graph:
        graph[city1] = []
    if city2 not in graph:
        graph[city2] = []
    
    graph[city1].append((city2, dist))
    graph[city2].append((city1, dist))

# Taking heuristic input
heuristic = {}
print("Enter heuristic values for each city (estimated cost to goal):")
for city in graph.keys():
    heuristic[city] = int(input(f"Heuristic value for {city}: "))

start = input("Enter start city: ")
goal = input("Enter goal city: ")

path = best_first_search(graph, start, goal, heuristic)
if path:
    print("Shortest path using Best First Search:", " -> ".join(path))
else:
    print("No path found.")

-----------------------------------------------------------------------------------------------------------------------------------------------------
===================BFS ROBO NAV================
import heapq

MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def heuristic(pos, goal):
    return abs(pos[0] - goal[0]) + abs(pos[1] - goal[1])

def best_first_search(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    pq = [(heuristic(start, goal), start)]
    visited = set()
    parent = {start: None}

    while pq:
        _, current = heapq.heappop(pq)
        
        if current in visited:
            continue
        
        visited.add(current)
        
        if current == goal:
            return reconstruct_path(parent, goal)
        
        x, y = current
        for dx, dy in MOVES:
            nx, ny = x + dx, y + dy

            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0 and (nx, ny) not in visited:
                heapq.heappush(pq, (heuristic((nx, ny), goal), (nx, ny)))
                parent[(nx, ny)] = current

    return None

def reconstruct_path(parent, goal):
    path = []
    while goal:
        path.append(goal)
        goal = parent[goal]
    return path[::-1]

def print_grid(grid, path):
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if (i, j) in path:
                print("R", end=" ")
            elif grid[i][j] == 1:
                print("X", end=" ")
            else:
                print(".", end=" ")
        print()
    print()

if __name__ == "__main__":
    grid = [
        [0, 0, 0, 0, 1],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0],
        [1, 1, 0, 1, 0],
        [0, 0, 0, 0, 0]
    ]

    start = (0, 0)
    goal = (4, 4)

    print("Initial Grid:")
    print_grid(grid, [])

    path = best_first_search(grid, start, goal)

    if path:
        print("Shortest Path Found:")
        print_grid(grid, path)
        print("Path:", path)
    else:
        print("No path found.")
-----------------------------------------------------------------------------------------------------------------------------------------------------
===================A* 8 PUZZLE================
import heapq

def manhattan_distance(state, goal):
    distance = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] != 0:
                x, y = divmod(goal[state[i][j]], 3)
                distance += abs(i - x) + abs(j - y)
    return distance

def get_blank_position(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j

def move_tile(state, blank_pos, move):
    new_state = [row[:] for row in state]
    i, j = blank_pos
    di, dj = move
    new_state[i][j], new_state[i + di][j + dj] = new_state[i + di][j + dj], new_state[i][j]
    return new_state

def get_possible_moves(blank_pos):
    i, j = blank_pos
    moves = []
    if i > 0: moves.append((-1, 0))
    if i < 2: moves.append((1, 0))
    if j > 0: moves.append((0, -1))
    if j < 2: moves.append((0, 1))
    return moves

def a_star_solve(initial_state, goal_state):
    goal_positions = {goal_state[i][j]: (i * 3 + j) for i in range(3) for j in range(3)}
    pq = [(manhattan_distance(initial_state, goal_positions), 0, initial_state, [])]
    visited = set()
    
    while pq:
        f, g, current_state, path = heapq.heappop(pq)
        
        if current_state == goal_state:
            return path + [current_state]
        
        visited.add(tuple(map(tuple, current_state)))
        blank_pos = get_blank_position(current_state)
        
        for move in get_possible_moves(blank_pos):
            next_state = move_tile(current_state, blank_pos, move)
            if tuple(map(tuple, next_state)) not in visited:
                heapq.heappush(pq, (g + 1 + manhattan_distance(next_state, goal_positions), g + 1, next_state, path + [current_state]))
    
    return None

def print_state(state):
    for row in state:
        print(row)
    print()

def print_solution(solution):
    if solution is None:
        print("No solution found!")
    else:
        print("Solution Path:")
        for step, state in enumerate(solution):
            print(f"Step {step}:")
            print_state(state)

if __name__ == "__main__":
    print("Enter the initial state row-wise (use space to separate numbers, 0 for blank tile):")
    initial_state = [list(map(int, input().split())) for _ in range(3)]
    goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
    
    print("Initial State:")
    print_state(initial_state)
    
    solution = a_star_solve(initial_state, goal_state)
    print_solution(solution)
 # 8 5 2
 # 7 4 1
 # 0 3 6

-----------------------------------------------------------------------------------------------------------------------------------------------------
===================A* CITY DIST================
from queue import PriorityQueue

def a_star_search(graph, start, goal, heuristic):
    pq = PriorityQueue()
    pq.put((0 + heuristic[start], 0, start, [start]))
    visited = {}
    
    while not pq.empty():
        f, g, current, path = pq.get()
        
        if current == goal:
            return path, g
        
        if current in visited and visited[current] <= g:
            continue
        visited[current] = g
        
        for neighbor, cost in graph[current]:
            new_g = g + cost
            new_f = new_g + heuristic[neighbor]
            pq.put((new_f, new_g, neighbor, path + [neighbor]))
    
    return None, float('inf')

graph = {}
n = int(input("Enter the number of cities: "))
print("Enter the city connections in format: City1 City2 Distance")
for _ in range(n):
    city1, city2, dist = input().split()
    dist = int(dist)
    
    if city1 not in graph:
        graph[city1] = []
    if city2 not in graph:
        graph[city2] = []
    
    graph[city1].append((city2, dist))
    graph[city2].append((city1, dist))

heuristic = {}
print("Enter heuristic values for each city (estimated cost to goal):")
for city in graph.keys():
    heuristic[city] = int(input(f"Heuristic value for {city}: "))

start = input("Enter start city: ")
goal = input("Enter goal city: ")

path, cost = a_star_search(graph, start, goal, heuristic)
if path:
    print("Shortest path using A* Search:", " -> ".join(path))
    print("Total cost:", cost)
else:
    print("No path found.") 

-----------------------------------------------------------------------------------------------------------------------------------------------------
===================A* ROBO NAV================
import heapq

MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]

def heuristic(pos, goal):
    return abs(pos[0] - goal[0]) + abs(pos[1] - goal[1])

def a_star_search(grid, start, goal):
    rows, cols = len(grid), len(grid[0])
    pq = [(0 + heuristic(start, goal), 0, start)]
    parent = {start: None}
    g_costs = {start: 0}
    
    while pq:
        f, g, current = heapq.heappop(pq)
        
        if current == goal:
            return reconstruct_path(parent, goal), g
        
        x, y = current
        for dx, dy in MOVES:
            nx, ny = x + dx, y + dy
            
            if 0 <= nx < rows and 0 <= ny < cols and grid[nx][ny] == 0:
                new_g = g + (1.4 if dx != 0 and dy != 0 else 1)
                if (nx, ny) not in g_costs or new_g < g_costs[(nx, ny)]:
                    g_costs[(nx, ny)] = new_g
                    new_f = new_g + heuristic((nx, ny), goal)
                    heapq.heappush(pq, (new_f, new_g, (nx, ny)))
                    parent[(nx, ny)] = current
    
    return None, float('inf')

def reconstruct_path(parent, goal):
    path = []
    while goal is not None:
        path.append(goal)
        goal = parent.get(goal, None)
    path.reverse()
    return path if path[0] == (0, 0) else None

def print_grid(grid, path):
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if (i, j) in path:
                print("R", end=" ")
            elif grid[i][j] == 1:
                print("X", end=" ")
            else:
                print(".", end=" ")
        print()
    print()

if __name__ == "__main__":
    grid = [
        [0, 0, 0, 0, 1],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 0, 0],
        [1, 1, 0, 1, 0],
        [0, 0, 0, 0, 0]
    ]

    start = (0, 0)
    goal = (4, 4)

    print("Initial Grid:")
    print_grid(grid, [])

    path, cost = a_star_search(grid, start, goal)

    if path:
        print("Shortest Path Found:")
        print_grid(grid, path)
        print("Path:", path)
        print("Total cost:", cost)
    else:
        print("No path found.")

-----------------------------------------------------------------------------------------------------------------------------------------------------
===================CSP Cryptarithematic================
from itertools import permutations

def is_valid_solution(words, result, assignments):
    def word_to_num(word):
        return int("".join(str(assignments[c]) for c in word))
    
    total = sum(word_to_num(word) for word in words)
    return total == word_to_num(result)

def word_to_number(word, assignments):
    return int("".join(str(assignments[c]) for c in word))

def solve_cryptarithmetic(words, result):
    unique_chars = set("".join(words + [result]))
    if len(unique_chars) > 10:
        print("Too many unique letters (max 10 allowed).")
        return None

    first_letters = set(word[0] for word in words + [result])
    letters = list(unique_chars)
    digits = range(10)

    for perm in permutations(digits, len(letters)):
        assignments = dict(zip(letters, perm))

        if any(assignments[fl] == 0 for fl in first_letters):
            continue

        if is_valid_solution(words, result, assignments):
            return assignments
    return None

def print_solution(words, result, assignments):
    print("\nLetter to Digit Mapping:")
    for letter in sorted(assignments):
        print(f"{letter} = {assignments[letter]}")
    
    print("\nCryptarithmetic Format:\n")

    max_len = max(len(word) for word in words + [result])
    padded_words = [word.rjust(max_len) for word in words]
    padded_result = result.rjust(max_len)

    for word in padded_words[:-1]:
        print("  " + " ".join(str(assignments[c]) if c != ' ' else ' ' for c in word))
    print("+ " + " ".join(str(assignments[c]) if c != ' ' else ' ' for c in padded_words[-1]))
    print("-" * (2 * max_len + 1))
    print("  " + " ".join(str(assignments[c]) if c != ' ' else ' ' for c in padded_result))

def main():
    expression = input("Enter cryptarithmetic expression (e.g., SEND + MORE = MONEY): ").replace(" ", "")
    if '+' not in expression or '=' not in expression:
        print("Invalid format. Use format like: SEND + MORE = MONEY")
        return

    try:
        left, result = expression.split('=')
        words = left.split('+')
        result = result.strip().upper()

        words = [w.strip().upper() for w in words]

        solution = solve_cryptarithmetic(words, result)
        if solution:
            print_solution(words, result, solution)
        else:
            print("No solution found.")
    except Exception as e:
        print("Error:", e)

if __name__ == "__main__":
    main()

-----------------------------------------------------------------------------------------------------------------------------------------------------
===================CSP CROSSWORD PUZZLE================
def crossword_solver():
    grid_size_input = input("Enter grid size (e.g., 5 for 5x5 grid): ")
    
    # Extract the numeric part of the grid size (e.g., '4x4' -> 4)
    try:
        grid_size = int(grid_size_input.split('x')[0])
    except ValueError:
        print("Invalid grid size format. Please use the format 'NxN' (e.g., '4x4').")
        return
    
    print("Enter the grid layout (use '+' for blocked cells, '-' for empty cells):")
    grid = []
    for i in range(grid_size):
        row = input(f"Enter row {i+1}: ").split()
        if len(row) != grid_size:
            print(f"Each row must have exactly {grid_size} cells.")
            return
        grid.append(row)

    words_input = input("Enter words to place in the grid, separated by commas: ").split(',')
    words = [word.strip() for word in words_input]

    def can_place_word_horizontally(r, c, word):
        if c + len(word) > grid_size or (c > 0 and grid[r][c - 1] != '+'):
            return False
        for i in range(len(word)):
            if grid[r][c + i] not in ('-', word[i]):
                return False
        return True

    def can_place_word_vertically(r, c, word):
        if r + len(word) > grid_size or (r > 0 and grid[r - 1][c] != '+'):
            return False
        for i in range(len(word)):
            if grid[r + i][c] not in ('-', word[i]):
                return False
        return True

    def place_word_horizontally(r, c, word):
        for i in range(len(word)):
            grid[r][c + i] = word[i]

    def place_word_vertically(r, c, word):
        for i in range(len(word)):
            grid[r + i][c] = word[i]

    for word in words:
        placed = False
        for i in range(grid_size):
            for j in range(grid_size):
                if can_place_word_horizontally(i, j, word):
                    place_word_horizontally(i, j, word)
                    placed = True
                    break
                elif can_place_word_vertically(i, j, word):
                    place_word_vertically(i, j, word)
                    placed = True
                    break
            if placed:
                break

    print("Final Crossword Grid:")
    for row in grid:
        print(' '.join(row))

crossword_solver()

-----------------------------------------------------------------------------------------------------------------------------------------------------
===================CSP MAP COLORING================
def get_input():
    num_regions = int(input("Enter number of regions: "))
    adjacency = {}

    print("\nEnter region names:")
    regions = []
    for _ in range(num_regions):
        region = input("- Region name: ")
        regions.append(region)
        adjacency[region] = []

    print("\nEnter adjacency information:")
    for region in regions:
        neighbors = input(f"- Enter neighbors of {region} (comma-separated): ").split(",")
        adjacency[region] = [n.strip() for n in neighbors if n.strip() in regions]

    colors = input("\nEnter available colors (comma-separated): ").split(",")
    colors = [c.strip().capitalize() for c in colors]

    return regions, adjacency, colors

def is_valid(region, color, assignment, adjacency):
    for neighbor in adjacency[region]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True

def backtrack(assignment, regions, adjacency, colors):
    if len(assignment) == len(regions):
        return assignment

    unassigned = [r for r in regions if r not in assignment]
    region = unassigned[0]

    for color in colors:
        if is_valid(region, color, assignment, adjacency):
            assignment[region] = color
            result = backtrack(assignment, regions, adjacency, colors)
            if result:
                return result
            del assignment[region]
    return None

# Main Execution
regions, adjacency, colors = get_input()
solution = backtrack({}, regions, adjacency, colors)

print("\n--- Map Coloring Solution ---")
if solution:
    for region in regions:
        print(f"{region}: {solution[region]}")
else:
    print("No solution found with the given colors.")

