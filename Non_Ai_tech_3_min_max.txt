===================NON AI Tic Tac Toe C================
#include <iostream>
using namespace std;

char board[3][3] = { {'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'} };
char currentPlayer = 'X';
string playerX, playerO;

void drawBoard() {
    cout << "\n";
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            cout << " " << board[row][col] << " ";
            if (col < 2) cout << "|";
        }
        cout << "\n";
        if (row < 2) cout << "---+---+---\n";
    }
}

bool checkWin() {
    for (int i = 0; i < 3; i++) {
        if ((board[i][0] == board[i][1] && board[i][1] == board[i][2]) ||
            (board[0][i] == board[1][i] && board[1][i] == board[2][i])) {
            return true;
        }
    }
    if ((board[0][0] == board[1][1] && board[1][1] == board[2][2]) ||
        (board[0][2] == board[1][1] && board[1][1] == board[2][0])) {
        return true;
    }
    return false;
}

bool isDraw() {
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            if (board[row][col] != 'X' && board[row][col] != 'O') {
                return false;
            }
        }
    }
    return true;
}

void makeMove() {
    int move;
    string currentPlayerName = (currentPlayer == 'X') ? playerX : playerO;
    
    cout << "\n" << currentPlayerName << " (" << currentPlayer << "), enter your move (1-9): ";
    cin >> move;

    if (move < 1 || move > 9) {
        cout << "Invalid input Enter a number between 1 to 9.\n";
        makeMove();
        return;
    }

    int row = (move - 1) / 3, col = (move - 1) % 3;
    if (board[row][col] == 'X' || board[row][col] == 'O') {
        cout << "That spot is already taken.... Try again.\n";
        makeMove();
    } else {
        board[row][col] = currentPlayer;
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }
}

int main() {
    cout << "Welcome \n";
    cout << "Enter name of Player X: ";
    getline(cin, playerX);
    cout << "Enter name of Player O: ";
    getline(cin, playerO);
    
    cout << playerX << " goes first as X.\n";

    while (true) {
        drawBoard();
        makeMove();

        if (checkWin()) {
            drawBoard();
            cout << "\nCongratulations " << ((currentPlayer == 'X') ? playerO : playerX) << " wins\n";
            break;
        }

        if (isDraw()) {
            drawBoard();
            cout << "\nIt's a tie!\n";
            break;
        }
    }

    cout << "Game over\n";
    return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
===================NON AI Tic Tac Toe PYTHON================
# Tic Tac Toe in Python - Two Player Non-AI Version

board = [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]
current_player = 'X'

player_x = input("Enter name of Player X: ")
player_o = input("Enter name of Player O: ")

print(f"{player_x} goes first as X.")

def draw_board():
    print()
    for row in range(3):
        print(" " + " | ".join(board[row]))
        if row < 2:
            print("---+---+---")

def check_win():
    # Rows and columns
    for i in range(3):
        if (board[i][0] == board[i][1] == board[i][2]) or \
           (board[0][i] == board[1][i] == board[2][i]):
            return True
    # Diagonals
    if (board[0][0] == board[1][1] == board[2][2]) or \
       (board[0][2] == board[1][1] == board[2][0]):
        return True
    return False

def is_draw():
    for row in board:
        for cell in row:
            if cell not in ['X', 'O']:
                return False
    return True

def make_move():
    global current_player
    player_name = player_x if current_player == 'X' else player_o
    try:
        move = int(input(f"\n{player_name} ({current_player}), enter your move (1-9): "))
    except ValueError:
        print("Invalid input. Please enter a number.")
        return make_move()

    if move < 1 or move > 9:
        print("Invalid input. Enter a number between 1 and 9.")
        return make_move()

    row = (move - 1) // 3
    col = (move - 1) % 3

    if board[row][col] in ['X', 'O']:
        print("That spot is already taken. Try again.")
        return make_move()

    board[row][col] = current_player
    current_player = 'O' if current_player == 'X' else 'X'

# Main Game Loop
while True:
    draw_board()
    make_move()

    if check_win():
        draw_board()
        winner = player_o if current_player == 'X' else player_x
        print(f"\nCongratulations {winner} wins!")
        break

    if is_draw():
        draw_board()
        print("\nIt's a tie!")
        break

print("Game over.")

---------------------------------------------------------------------------------------------------------------------------------------------------------
===================NON AI N - Queens C================
#include <iostream>
#include <cstdlib>
using namespace std;

void printBoard(int** board, int N) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            cout << (board[i][j] ? "Q " : "- ");
        cout << endl;
    }
    cout << endl;
}

bool isSafe(int** board, int row, int col, int N) {
    for (int i = 0; i < col; i++)  
        if (board[row][i]) return false;

    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)  
        if (board[i][j]) return false;

    for (int i = row, j = col; i < N && j >= 0; i++, j--)  
        if (board[i][j]) return false;

    return true;
}

bool solveNQueens(int** board, int col, int N, int& solutionsFound, int maxSolutions) {
    if (col >= N) {
        printBoard(board, N);
        solutionsFound++;
        return solutionsFound >= maxSolutions; 
    }

    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col, N)) {
            board[i][col] = 1;

            if (solveNQueens(board, col + 1, N, solutionsFound, maxSolutions)) 
                return true;

            board[i][col] = 0;
        }
    }
    return false;
}

int main() {
    int N;
    cout << "Enter the matrix size N*N: ";
    cin >> N;

    if (N < 1) {
        cout << "Invalid size" << endl;
        return 0;
    }

    int** board = new int*[N];
    for (int i = 0; i < N; i++) {
        board[i] = new int[N]();
    }

    cout << "Finding solutions for the " << N << "-Queens problem...\n";

    int solutionsFound = 0;
    if (!solveNQueens(board, 0, N, solutionsFound, 2)) {
        cout << "No solution exists.\n";
    }

    for (int i = 0; i < N; i++) {
        delete[] board[i];
    }
    delete[] board;

    return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------------------------
===================NON AI N - Queens PYTHON================

def print_board(board, N):
    for i in range(N):
        for j in range(N):
            print("Q" if board[i][j] else "-", end=" ")
        print()
    print()

def is_safe(board, row, col, N):
    # Check left side of the row
    for i in range(col):
        if board[row][i]:
            return False

    # Check upper diagonal on left side
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j]:
            return False
        i -= 1
        j -= 1

    # Check lower diagonal on left side
    i, j = row, col
    while i < N and j >= 0:
        if board[i][j]:
            return False
        i += 1
        j -= 1

    return True

def solve_n_queens(board, col, N, solutions_found, max_solutions):
    if col >= N:
        print_board(board, N)
        solutions_found[0] += 1
        return solutions_found[0] >= max_solutions

    for i in range(N):
        if is_safe(board, i, col, N):
            board[i][col] = 1
            if solve_n_queens(board, col + 1, N, solutions_found, max_solutions):
                return True
            board[i][col] = 0  # backtrack
    return False

def main():
    N = int(input("Enter the matrix size N*N: "))
    if N < 1:
        print("Invalid size")
        return

    board = [[0 for _ in range(N)] for _ in range(N)]

    print(f"Finding solutions for the {N}-Queens problem...\n")
    solutions_found = [0]
    if not solve_n_queens(board, 0, N, solutions_found, 2):
        print("No solution exists.")

if __name__ == "__main__":
    main()
---------------------------------------------------------------------------------------------------------------------------------------------------------
===================NON AI Magic Square C================

#include <iostream>
#include <vector>

using namespace std;

void oddMagic(int n) {
    vector<vector<int> > square(n, vector<int>(n, 0)); 

    int i = 0, j = n / 2; 
    for (int num = 1; num <= n * n; num++) {
        square[i][j] = num;

        int new_i = (i - 1 + n) % n;  
        int new_j = (j + 1) % n;      

        if (square[new_i][new_j] != 0) {
            i = (i + 1) % n; 
        } else {
            i = new_i;
            j = new_j;
        }
    }

    cout << "Magic Square of order " << n << ":\n";
    for (int r = 0; r < n; r++) {
        for (int c = 0; c < n; c++) {
            cout << square[r][c] << "\t";
        }
        cout << "\n";
    }
    cout << "Magic Constant: " << n * (n * n + 1) / 2 << "\n";
}

void evenMagic(int n) {
    vector<vector<int> > square(n, vector<int>(n, 0));  

    int num = 1;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            square[i][j] = num++;
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (((i % 4 == j % 4) || ((i % 4 + j % 4) == 3))) {
                square[i][j] = n * n + 1 - square[i][j]; 
            }
        }
    }
    cout << "Magic Square of order " << n << ":\n";
    for (int r = 0; r < n; r++) {
        for (int c = 0; c < n; c++) {
            cout << square[r][c] << "\t";
        }
        cout << "\n";
    }
    cout << "Magic Constant: " << n * (n * n + 1) / 2 << "\n";
}

int main() {
    int n;
    char choice;

    cout << "Do you want an Odd order (O) or Even order (E): ";
    cin >> choice;
    
    if (choice == 'O' || choice == 'o') {
        cout << "Enter an odd number: ";
        cin >> n;
        if (n % 2 == 1) {
            oddMagic(n);
        } else {
            cout << "Error: Enter an odd number.\n";
        }
    } 
    else if (choice == 'E' || choice == 'e') {
        cout << "Enter an even number: ";
        cin >> n;
        if (n % 4 == 0) {
            evenMagic(n);
        } else {
            cout << "Error: Enter an even number.\n";
        }
    } 
    else {
        cout << "Invalid choice! Please enter O for Odd or E for Even.\n";
    }

    return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------
===================NON AI Magic Square PYTHON================

def odd_magic(n):
    square = [[0] * n for _ in range(n)]
    i, j = 0, n // 2

    for num in range(1, n * n + 1):
        square[i][j] = num
        new_i = (i - 1 + n) % n
        new_j = (j + 1) % n

        if square[new_i][new_j] != 0:
            i = (i + 1) % n
        else:
            i, j = new_i, new_j

    print(f"\nMagic Square of order {n}:")
    for row in square:
        print("\t".join(str(x) for x in row))
    print("Magic Constant:", n * (n * n + 1) // 2)


def even_magic(n):
    square = [[(n * i) + j + 1 for j in range(n)] for i in range(n)]

    for i in range(n):
        for j in range(n):
            if (i % 4 == j % 4) or ((i % 4 + j % 4) == 3):
                square[i][j] = (n * n + 1) - square[i][j]

    print(f"\nMagic Square of order {n}:")
    for row in square:
        print("\t".join(str(x) for x in row))
    print("Magic Constant:", n * (n * n + 1) // 2)


def main():
    choice = input("Do you want an Odd order (O) or Even order (E): ").strip().lower()

    if choice == 'o':
        n = int(input("Enter an odd number: "))
        if n % 2 == 1:
            odd_magic(n)
        else:
            print("Error: Enter an odd number.")
    elif choice == 'e':
        n = int(input("Enter an even number: "))
        if n % 4 == 0:
            even_magic(n)
        else:
            print("Error: Enter an even number divisible by 4.")
    else:
        print("Invalid choice! Please enter O for Odd or E for Even.")


if __name__ == "__main__":
    main()

---------------------------------------------------------------------------------------------------------------------------------------------------------
===================MIN MAX Tic Tac Toe PYTHON================

##### import math

board = [' ' for _ in range(9)]

def print_board():
    for i in range(3):
        row = [str(i * 3 + j + 1) if board[i * 3 + j] == ' ' else board[i * 3 + j] for j in range(3)]
        print('|'.join(row))
        if i < 2:
            print('-' * 5)

def is_moves_left():
    return ' ' in board

def evaluate():
    win_combos = [(0,1,2),(3,4,5),(6,7,8),
                  (0,3,6),(1,4,7),(2,5,8),
                  (0,4,8),(2,4,6)]
    for i, j, k in win_combos:
        if board[i] == board[j] == board[k]:
            if board[i] == 'X':
                return 10
            elif board[i] == 'O':
                return -10
    return 0

def minimax(depth, is_max):
    score = evaluate()
    if score == 10 or score == -10:
        return score
    if not is_moves_left():
        return 0

    if is_max:
        best = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                best = max(best, minimax(depth + 1, False))
                board[i] = ' '
        return best
    else:
        best = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                best = min(best, minimax(depth + 1, True))
                board[i] = ' '
        return best

def find_best_move():
    best_val = -math.inf
    best_move = -1
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'X'
            move_val = minimax(0, False)
            board[i] = ' '
            if move_val > best_val:
                best_val = move_val
                best_move = i
    return best_move

def play_game():
    print("You are O. AI is X.")
    print_board()
    while True:
        move = int(input("Enter your move (1-9): ")) - 1
        if move < 0 or move >= 9 or board[move] != ' ':
            print("Invalid move, try again.")
            continue
        board[move] = 'O'
        print_board()
        if evaluate() == -10:
            print("You win!")
            break
        if not is_moves_left():
            print("It's a tie!")
            break

        print("AI is thinking...")
        ai_move = find_best_move()
        board[ai_move] = 'X'
        print_board()
        if evaluate() == 10:
            print("AI wins!")
            break
        if not is_moves_left():
            print("It's a tie!")
            break

play_game()
